{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np         # библиотека для матриц и математики\n",
        "import pandas as pd        # библиотека для работы с табличками\n",
        "from scipy import stats    # модуль для работы со статистикой\n",
        "\n",
        "# библиотеки для визуализации\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "import math\n",
        "\n",
        "from statsmodels.stats.weightstats import ztest as ztest\n",
        "\n",
        "from scipy.stats import ttest_1samp as ttest1\n",
        "from scipy.stats import ttest_ind as ttest2\n",
        "\n",
        "M1 = 5\n",
        "M2 = 5\n",
        "S1 = 3\n",
        "S2 = 1\n",
        "n1 = 250\n",
        "n2 = 250"
      ],
      "metadata": {
        "id": "-pLSrnvj986-"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#for X1\n",
        "\n",
        "sample1 = stats.norm(loc=M1, scale= S1**0.5).rvs(250) \n",
        "\n",
        "mean1 = np.mean(sample1)\n",
        "s1 = np.var(sample1)\n",
        "std1 = np.std(sample1)\n",
        "\n",
        "\n",
        "print(\"X1: mean1 = %.3f; s1 = %.3f; std1 = %.3f; n1 = %.3f\" % (mean1, s1, std1, n1))\n",
        "print(\"First sample:\", sample1.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xlY6jsRCCX7b",
        "outputId": "86d9e9af-8c8f-4d7a-ec01-79cfb6e44ab6"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X1: mean1 = 5.170; s1 = 2.650; std1 = 1.628; n1 = 250.000\n",
            "First sample: [4.641140112927845, 6.164707441504966, 5.25541607915633, 4.604130498276042, 6.186291360380817, 4.953128745965445, 4.719660563403417, 7.586802098623087, 4.799933886890953, 4.733900969397194, 6.391061233819437, 6.099968479369724, 6.205837872764908, 6.688311849945903, 1.7352219299666634, 5.607831683750825, 5.155041425172142, 5.246754027014484, 4.6628864496474645, 2.7212481841366, 4.457270807029989, 5.1946699835163, 4.437044440780216, 6.123146983183939, 5.781672082079711, 3.5447843848646965, 4.541956778738434, 4.589058853236984, 3.9013696393364006, 3.5840449686158085, 3.718525081528797, 5.5748432296278505, 4.174048401894026, 4.877557999136007, 6.927184479468926, 5.6638965389018745, 5.346755988733125, 5.230580327201909, 7.245883963108943, 5.0932085216377425, 5.935501479356244, 6.562038862734832, 1.8901108182750423, 4.579224626334436, 4.061581832792799, 3.9999914911579877, 7.655781674586658, 3.69983912696886, 4.777249326309606, 5.566512962752029, 7.3912311667441095, 6.108751139071116, 8.604605992077992, 7.227426916979154, 4.302374911251726, 2.3873006844585984, 4.2728904758477375, 5.491923497699692, 3.203750713935043, 6.109866585734004, 4.352357215306874, 4.059627822594458, 8.232770051530045, 6.1019338519697754, 4.4477547317106145, 6.059734464945846, 5.861564646397266, 5.93674627606514, 5.018645264926575, 6.4944947239226805, 6.388988074602328, 9.482781443787395, 3.904795351079094, 4.824930445780036, 4.17852731369593, 4.884126745983686, 5.364704459171638, 6.698414591799966, 4.41338885436568, 3.11115976233745, 2.0711009425202778, 4.708597955839253, 6.902770217687382, 7.962705264119859, 5.97316233372837, 5.587445134385015, 5.935554288764357, 7.432216636590262, 5.728027926043821, 3.742676916033257, 3.910772794872224, 7.875698247865417, 9.90930404609506, 6.553606888001317, 4.321336388397291, 6.677849042653786, 5.22197124265935, 2.2297927541664433, 4.693973361902962, 5.46250532584787, 4.658656532355101, 4.0719994572223985, 3.142845069548903, 4.45969894290481, 5.630701149550599, 5.729188716492636, 7.792035579839343, 6.77053670910564, 6.112449262336166, 4.896673673769701, 5.073960945898678, 6.3804409003308145, 1.5342944982264148, 5.173207151907284, 3.9091286851233615, 2.804156092686848, 6.579885738977052, 1.7584787439329204, 5.331757621259615, 3.49699238690669, 5.669188394755423, 3.149120545749691, 6.741462236891284, 7.894910519429971, 6.715709867613572, 4.1881438627171175, 3.6689269459305627, 5.224082589871835, 6.045959439119033, 5.502518982104867, 5.1944144904569605, 5.37975907146749, 3.1146555988657445, 6.781843077908729, 4.6860750747059425, 4.538180062774337, 2.1284772844041346, 1.4656591278387379, 3.7217654857075884, 6.917426069253949, 6.239168452284098, 4.5106131814561685, 4.417887213321744, 2.2659158488492097, 1.036644508346019, 3.955309242830104, 6.014972517727047, 4.175271245714659, 4.211022978012222, 5.951584088981878, 6.062871826260652, 5.95520471723169, 3.529067987666804, 6.605782245152532, 3.59466643483216, 5.892577821691198, 3.8588839041944483, 5.6334686636592535, 5.7371424337696375, 7.258450178867562, 2.808475809164148, 8.53824141898739, 5.893099100893496, 4.0832208516690836, 6.21504342562123, 5.993348897900741, 6.8457065127224395, 5.578870323674651, 3.1421977378292745, 4.605641232195908, 3.4514276404049893, 7.6291366439285415, 6.334612794790786, 8.824484252610334, 7.069043042913792, 4.384755326796502, 4.724507339339568, 3.6024352289521833, 6.421402155811081, 5.026888442419125, 6.002039823914768, 5.273918115786175, 3.1725095454975643, 6.6101925838769935, 6.5936737099924825, 4.312214120147823, 6.837909559181093, 7.518536142073576, 5.7333851507140015, 4.999426920014326, 2.770608017113066, 6.190229772432367, 7.504371470539068, 3.0922884568791575, 5.620862806253603, 7.245580618146725, 2.56261191869676, 2.668968516317444, 2.400850682084137, 5.016731681147761, 6.166811889199725, 1.526355053661101, 7.36246461317897, 5.671986014362828, 4.213016491665116, 8.215546755324873, 5.069811041849392, 3.752363453910087, 3.9888719239528667, 2.2363791768460946, 5.451606804863727, 5.747022936962774, 5.9976399908130205, 3.710131899498973, 7.522004434268794, 6.294396680465562, 4.7914177318122855, 5.010397045771112, 5.689749730756709, 3.6857354120233294, 5.131854659815726, 7.589190958330933, 6.21586821365163, 5.719514861441961, 5.325159127533782, 4.316215151492988, 7.05266768001982, 5.960112820179821, 8.655741381849618, 1.9521679786394315, 6.34795750195012, 3.3404571329966686, 6.178949047879181, 7.3708253819115725, 5.9331038980622175, 3.498979753547802, 2.849794545358481, 6.9107059396938615, 5.129642997503769, 3.4251463268472273, 7.194198591968472, 3.073169580052783, 5.407083582553654, 4.4026918652961635, 4.230578610419613, 0.8518921894979394, 6.222093515842208, 5.306479232382875, 6.132669995519901, 3.7974719821824916]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#for X2\n",
        "\n",
        "sample2 = stats.norm(loc=M2, scale= S2**0.5).rvs(250)  \n",
        "\n",
        "mean2 = np.mean(sample2)\n",
        "s2 = np.var(sample2)\n",
        "std2 = np.std(sample2)\n",
        "\n",
        "\n",
        "print(\"X2: mean2 = %.3f; s2 = %.3f; std2 = %.3f; n2 = %.3f\" % (mean2, s2, std2, n2))\n",
        "print(\"Second sample:\", sample2.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CSEuhAJER-6q",
        "outputId": "c285bdbe-cbd5-44e5-d039-cbbf193f85a4"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X2: mean2 = 4.942; s2 = 0.889; std2 = 0.943; n2 = 250.000\n",
            "Second sample: [4.849891003916208, 5.035947195987535, 5.719852903756312, 4.036433125256374, 5.059345685490671, 5.359175699822687, 5.315532979824054, 3.61743170443164, 5.568140910286954, 5.316955605783392, 5.447931736747058, 5.012673685689315, 4.226001875587843, 4.72979279479293, 5.764934432345903, 4.959630858362245, 5.980046177411, 5.000652715880889, 4.043899200674533, 4.276606671158111, 5.613819909426255, 5.476481765068219, 5.942600407664801, 4.5136249356398395, 5.9606578996953266, 4.306909173478738, 3.496049798088186, 5.508055786982567, 6.517857426229539, 4.253691107539021, 4.967242851596281, 6.485300628087931, 3.694545023126177, 5.286325209456658, 5.109242274039007, 3.8741205123880738, 4.833742017225204, 4.244871176087589, 5.12776125025081, 6.812543017666116, 4.6153402470706855, 6.365543296033508, 5.2151090321202815, 4.556288157862003, 5.031114441519091, 2.330303809154632, 3.9789170326516876, 5.025566898510446, 3.7043454060124974, 3.8906470951599967, 5.195676610482637, 6.200427440689774, 5.037111722698204, 4.141489120640518, 6.614484579899527, 4.455471799288047, 6.620897887684759, 5.266951275861273, 6.106614124578388, 6.461411280369069, 5.995346777263928, 4.587220019897016, 4.630917754257646, 4.666892961592585, 3.5863846939753747, 4.213308542318819, 5.200192359031855, 6.302297488028183, 4.715076584204259, 5.106203489834722, 3.2307752564642733, 5.105719465473098, 5.802548122603122, 5.350335326118383, 6.285050098008111, 2.891893554568726, 3.940081937841432, 5.633685105438299, 4.576837860681066, 5.752202731458773, 6.314566752779943, 4.830324182840564, 4.269429571329242, 5.056173167165411, 6.817240688648839, 5.728761943358504, 5.135840245392099, 4.0249807190257725, 5.912344353456069, 4.391064957043818, 5.392590435206606, 5.937221980798427, 3.92196332003767, 5.459492892492609, 6.732055283403291, 4.697423639937881, 4.213125155040872, 6.478412692103212, 3.0941742340220664, 4.723255775692025, 5.842718033116934, 5.415621693385021, 5.6321816075386, 3.056047032695573, 4.500279775958309, 4.181076278859013, 5.6139716556836285, 5.953260010054779, 3.744188043241903, 5.106029601519795, 4.2456923430514495, 4.314466628566943, 3.9547179190968587, 4.1331904999892695, 5.935186351900629, 3.6282194973354223, 3.2616285464001837, 5.535750849360807, 3.454346925387762, 3.7036127271000305, 5.6795005272319905, 4.439974472710207, 5.438869210430447, 3.7373280136118616, 4.839922812274641, 4.458301499683046, 4.175313435056246, 4.995323886231989, 3.5369159585630268, 5.211709962756444, 6.8115348898951655, 6.562981463304098, 6.061740250137452, 3.754550680264856, 5.763214151063683, 5.382356647945416, 6.324485604492329, 4.8176614522510475, 5.219955479030598, 6.47358977509414, 4.280774402420253, 4.2715748869711305, 4.678409418637049, 4.812307006945016, 3.4896332460209107, 4.7074897895829455, 5.238837737217197, 4.294273781025243, 6.296613310079971, 4.0555675266237055, 4.0750394655576745, 4.386528754793168, 4.129187968449385, 4.490084846438146, 4.556298053974549, 5.842829896684517, 5.556396999842423, 5.671049797635683, 6.485734288065913, 6.387649755926762, 4.8570772458199265, 3.585573654218602, 5.643180040824879, 5.306048943160875, 4.804693430689814, 5.5386313686380735, 5.725745757200946, 4.997755369248231, 5.905461063733917, 5.854660506630572, 5.821755329276899, 3.250118460055867, 3.8035908024659424, 4.6624970817886595, 4.955484156111885, 4.6944086939191925, 4.510232051760845, 5.551759047038253, 5.19307926075581, 5.1609405715801415, 5.866456440695467, 2.5686497247141844, 4.283344322873759, 5.83908804200653, 4.733249638565985, 5.724657989179544, 6.050430925460799, 3.2847701233205324, 4.636626130974733, 4.215099030876118, 5.2555267372999666, 5.0233353561459655, 4.278774055473135, 4.746887579602732, 5.1124721298346, 5.148892490215483, 4.268714351548624, 4.508797418246209, 4.377697237220254, 3.6678434618838445, 4.304342159741513, 6.66546214909866, 3.9828630176682296, 5.45727911475136, 6.17262129160654, 6.462553072579306, 5.406099126201628, 4.851949897056487, 4.242812826782667, 3.302981632915449, 4.576112468075992, 4.131473852623409, 5.939709229473642, 5.166767102391321, 3.9660280480164936, 5.848696757411223, 5.822622911585541, 3.4226905432090216, 5.216207885701241, 3.465044042773453, 4.027563317069148, 3.812003080282127, 5.335156289439659, 4.265875771382287, 6.5760577279395225, 6.9261412910551385, 4.618130637914495, 7.76735316705145, 3.727379692257073, 5.1158874822236635, 3.816202097317878, 4.566585809125062, 3.907691401031504, 4.467160219662668, 5.895422140399634, 4.352516155103119, 6.11938656520446, 6.100079785445182, 5.055612422525216, 4.243438446561324, 5.619912250565693, 5.163508580781009, 4.980351267024974, 4.699582366692872, 3.294887179788714, 5.405194845498966, 4.321997938339473, 4.742930296031905, 4.61641005055339, 4.610486334812644]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Pooled for X1 and X2\n",
        "sample = sample1.tolist() + sample2.tolist()\n",
        "mean = np.mean(sample)\n",
        "s = np.var(sample)\n",
        "std = np.std(sample)\n",
        "n = len(sample)\n",
        "print(sum)\n",
        "print(\"X2: mean = %.3f; s = %.3f; std = %.3f; n = %.3f\" % (mean, s, std, n))\n",
        "print(\"Pooled sample:\", sample)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "guIPypjJSBQ5",
        "outputId": "0988a4b9-4d51-4879-a073-827d570ea3a8"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<built-in function sum>\n",
            "X2: mean = 5.056; s = 1.783; std = 1.335; n = 500.000\n",
            "Pooled sample: [4.641140112927845, 6.164707441504966, 5.25541607915633, 4.604130498276042, 6.186291360380817, 4.953128745965445, 4.719660563403417, 7.586802098623087, 4.799933886890953, 4.733900969397194, 6.391061233819437, 6.099968479369724, 6.205837872764908, 6.688311849945903, 1.7352219299666634, 5.607831683750825, 5.155041425172142, 5.246754027014484, 4.6628864496474645, 2.7212481841366, 4.457270807029989, 5.1946699835163, 4.437044440780216, 6.123146983183939, 5.781672082079711, 3.5447843848646965, 4.541956778738434, 4.589058853236984, 3.9013696393364006, 3.5840449686158085, 3.718525081528797, 5.5748432296278505, 4.174048401894026, 4.877557999136007, 6.927184479468926, 5.6638965389018745, 5.346755988733125, 5.230580327201909, 7.245883963108943, 5.0932085216377425, 5.935501479356244, 6.562038862734832, 1.8901108182750423, 4.579224626334436, 4.061581832792799, 3.9999914911579877, 7.655781674586658, 3.69983912696886, 4.777249326309606, 5.566512962752029, 7.3912311667441095, 6.108751139071116, 8.604605992077992, 7.227426916979154, 4.302374911251726, 2.3873006844585984, 4.2728904758477375, 5.491923497699692, 3.203750713935043, 6.109866585734004, 4.352357215306874, 4.059627822594458, 8.232770051530045, 6.1019338519697754, 4.4477547317106145, 6.059734464945846, 5.861564646397266, 5.93674627606514, 5.018645264926575, 6.4944947239226805, 6.388988074602328, 9.482781443787395, 3.904795351079094, 4.824930445780036, 4.17852731369593, 4.884126745983686, 5.364704459171638, 6.698414591799966, 4.41338885436568, 3.11115976233745, 2.0711009425202778, 4.708597955839253, 6.902770217687382, 7.962705264119859, 5.97316233372837, 5.587445134385015, 5.935554288764357, 7.432216636590262, 5.728027926043821, 3.742676916033257, 3.910772794872224, 7.875698247865417, 9.90930404609506, 6.553606888001317, 4.321336388397291, 6.677849042653786, 5.22197124265935, 2.2297927541664433, 4.693973361902962, 5.46250532584787, 4.658656532355101, 4.0719994572223985, 3.142845069548903, 4.45969894290481, 5.630701149550599, 5.729188716492636, 7.792035579839343, 6.77053670910564, 6.112449262336166, 4.896673673769701, 5.073960945898678, 6.3804409003308145, 1.5342944982264148, 5.173207151907284, 3.9091286851233615, 2.804156092686848, 6.579885738977052, 1.7584787439329204, 5.331757621259615, 3.49699238690669, 5.669188394755423, 3.149120545749691, 6.741462236891284, 7.894910519429971, 6.715709867613572, 4.1881438627171175, 3.6689269459305627, 5.224082589871835, 6.045959439119033, 5.502518982104867, 5.1944144904569605, 5.37975907146749, 3.1146555988657445, 6.781843077908729, 4.6860750747059425, 4.538180062774337, 2.1284772844041346, 1.4656591278387379, 3.7217654857075884, 6.917426069253949, 6.239168452284098, 4.5106131814561685, 4.417887213321744, 2.2659158488492097, 1.036644508346019, 3.955309242830104, 6.014972517727047, 4.175271245714659, 4.211022978012222, 5.951584088981878, 6.062871826260652, 5.95520471723169, 3.529067987666804, 6.605782245152532, 3.59466643483216, 5.892577821691198, 3.8588839041944483, 5.6334686636592535, 5.7371424337696375, 7.258450178867562, 2.808475809164148, 8.53824141898739, 5.893099100893496, 4.0832208516690836, 6.21504342562123, 5.993348897900741, 6.8457065127224395, 5.578870323674651, 3.1421977378292745, 4.605641232195908, 3.4514276404049893, 7.6291366439285415, 6.334612794790786, 8.824484252610334, 7.069043042913792, 4.384755326796502, 4.724507339339568, 3.6024352289521833, 6.421402155811081, 5.026888442419125, 6.002039823914768, 5.273918115786175, 3.1725095454975643, 6.6101925838769935, 6.5936737099924825, 4.312214120147823, 6.837909559181093, 7.518536142073576, 5.7333851507140015, 4.999426920014326, 2.770608017113066, 6.190229772432367, 7.504371470539068, 3.0922884568791575, 5.620862806253603, 7.245580618146725, 2.56261191869676, 2.668968516317444, 2.400850682084137, 5.016731681147761, 6.166811889199725, 1.526355053661101, 7.36246461317897, 5.671986014362828, 4.213016491665116, 8.215546755324873, 5.069811041849392, 3.752363453910087, 3.9888719239528667, 2.2363791768460946, 5.451606804863727, 5.747022936962774, 5.9976399908130205, 3.710131899498973, 7.522004434268794, 6.294396680465562, 4.7914177318122855, 5.010397045771112, 5.689749730756709, 3.6857354120233294, 5.131854659815726, 7.589190958330933, 6.21586821365163, 5.719514861441961, 5.325159127533782, 4.316215151492988, 7.05266768001982, 5.960112820179821, 8.655741381849618, 1.9521679786394315, 6.34795750195012, 3.3404571329966686, 6.178949047879181, 7.3708253819115725, 5.9331038980622175, 3.498979753547802, 2.849794545358481, 6.9107059396938615, 5.129642997503769, 3.4251463268472273, 7.194198591968472, 3.073169580052783, 5.407083582553654, 4.4026918652961635, 4.230578610419613, 0.8518921894979394, 6.222093515842208, 5.306479232382875, 6.132669995519901, 3.7974719821824916, 4.849891003916208, 5.035947195987535, 5.719852903756312, 4.036433125256374, 5.059345685490671, 5.359175699822687, 5.315532979824054, 3.61743170443164, 5.568140910286954, 5.316955605783392, 5.447931736747058, 5.012673685689315, 4.226001875587843, 4.72979279479293, 5.764934432345903, 4.959630858362245, 5.980046177411, 5.000652715880889, 4.043899200674533, 4.276606671158111, 5.613819909426255, 5.476481765068219, 5.942600407664801, 4.5136249356398395, 5.9606578996953266, 4.306909173478738, 3.496049798088186, 5.508055786982567, 6.517857426229539, 4.253691107539021, 4.967242851596281, 6.485300628087931, 3.694545023126177, 5.286325209456658, 5.109242274039007, 3.8741205123880738, 4.833742017225204, 4.244871176087589, 5.12776125025081, 6.812543017666116, 4.6153402470706855, 6.365543296033508, 5.2151090321202815, 4.556288157862003, 5.031114441519091, 2.330303809154632, 3.9789170326516876, 5.025566898510446, 3.7043454060124974, 3.8906470951599967, 5.195676610482637, 6.200427440689774, 5.037111722698204, 4.141489120640518, 6.614484579899527, 4.455471799288047, 6.620897887684759, 5.266951275861273, 6.106614124578388, 6.461411280369069, 5.995346777263928, 4.587220019897016, 4.630917754257646, 4.666892961592585, 3.5863846939753747, 4.213308542318819, 5.200192359031855, 6.302297488028183, 4.715076584204259, 5.106203489834722, 3.2307752564642733, 5.105719465473098, 5.802548122603122, 5.350335326118383, 6.285050098008111, 2.891893554568726, 3.940081937841432, 5.633685105438299, 4.576837860681066, 5.752202731458773, 6.314566752779943, 4.830324182840564, 4.269429571329242, 5.056173167165411, 6.817240688648839, 5.728761943358504, 5.135840245392099, 4.0249807190257725, 5.912344353456069, 4.391064957043818, 5.392590435206606, 5.937221980798427, 3.92196332003767, 5.459492892492609, 6.732055283403291, 4.697423639937881, 4.213125155040872, 6.478412692103212, 3.0941742340220664, 4.723255775692025, 5.842718033116934, 5.415621693385021, 5.6321816075386, 3.056047032695573, 4.500279775958309, 4.181076278859013, 5.6139716556836285, 5.953260010054779, 3.744188043241903, 5.106029601519795, 4.2456923430514495, 4.314466628566943, 3.9547179190968587, 4.1331904999892695, 5.935186351900629, 3.6282194973354223, 3.2616285464001837, 5.535750849360807, 3.454346925387762, 3.7036127271000305, 5.6795005272319905, 4.439974472710207, 5.438869210430447, 3.7373280136118616, 4.839922812274641, 4.458301499683046, 4.175313435056246, 4.995323886231989, 3.5369159585630268, 5.211709962756444, 6.8115348898951655, 6.562981463304098, 6.061740250137452, 3.754550680264856, 5.763214151063683, 5.382356647945416, 6.324485604492329, 4.8176614522510475, 5.219955479030598, 6.47358977509414, 4.280774402420253, 4.2715748869711305, 4.678409418637049, 4.812307006945016, 3.4896332460209107, 4.7074897895829455, 5.238837737217197, 4.294273781025243, 6.296613310079971, 4.0555675266237055, 4.0750394655576745, 4.386528754793168, 4.129187968449385, 4.490084846438146, 4.556298053974549, 5.842829896684517, 5.556396999842423, 5.671049797635683, 6.485734288065913, 6.387649755926762, 4.8570772458199265, 3.585573654218602, 5.643180040824879, 5.306048943160875, 4.804693430689814, 5.5386313686380735, 5.725745757200946, 4.997755369248231, 5.905461063733917, 5.854660506630572, 5.821755329276899, 3.250118460055867, 3.8035908024659424, 4.6624970817886595, 4.955484156111885, 4.6944086939191925, 4.510232051760845, 5.551759047038253, 5.19307926075581, 5.1609405715801415, 5.866456440695467, 2.5686497247141844, 4.283344322873759, 5.83908804200653, 4.733249638565985, 5.724657989179544, 6.050430925460799, 3.2847701233205324, 4.636626130974733, 4.215099030876118, 5.2555267372999666, 5.0233353561459655, 4.278774055473135, 4.746887579602732, 5.1124721298346, 5.148892490215483, 4.268714351548624, 4.508797418246209, 4.377697237220254, 3.6678434618838445, 4.304342159741513, 6.66546214909866, 3.9828630176682296, 5.45727911475136, 6.17262129160654, 6.462553072579306, 5.406099126201628, 4.851949897056487, 4.242812826782667, 3.302981632915449, 4.576112468075992, 4.131473852623409, 5.939709229473642, 5.166767102391321, 3.9660280480164936, 5.848696757411223, 5.822622911585541, 3.4226905432090216, 5.216207885701241, 3.465044042773453, 4.027563317069148, 3.812003080282127, 5.335156289439659, 4.265875771382287, 6.5760577279395225, 6.9261412910551385, 4.618130637914495, 7.76735316705145, 3.727379692257073, 5.1158874822236635, 3.816202097317878, 4.566585809125062, 3.907691401031504, 4.467160219662668, 5.895422140399634, 4.352516155103119, 6.11938656520446, 6.100079785445182, 5.055612422525216, 4.243438446561324, 5.619912250565693, 5.163508580781009, 4.980351267024974, 4.699582366692872, 3.294887179788714, 5.405194845498966, 4.321997938339473, 4.742930296031905, 4.61641005055339, 4.610486334812644]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Для случайной величины Х:\")\n",
        "\n",
        "#ztest\n",
        "print(\"z-sctistic: %.3f\" %ztest(sample1.tolist(), value = M1)[0])\n",
        "print(\"p-value: %.3f\" %ztest(sample1.tolist(), value = M1)[1])\n",
        "\n",
        "#ttest\n",
        "print(\"t-sctistic: %.3f\" %ttest1(sample1.tolist(), M1)[0])\n",
        "print(\"p-value: %.3f\" %ttest1(sample1.tolist(), M1)[1])\n",
        "\n",
        "#chi-squared test(if we know m)\n",
        "chi_markm = len(sample1) * s1 / (S1) \n",
        "f_z_chim =  stats.chi2(n1).cdf(chi_markm)\n",
        "p_valuem = 2 * min(f_z_chim, 1 - f_z_chim)\n",
        "print(\"chi-squared test (m is known): z = %.3f; p-value = %.3f\" % (chi_markm, p_valuem))\n",
        "\n",
        "#chi-squared test(if we don't know m)\n",
        "chi_mark = (len(sample1) - 1) * s1 / (S1) \n",
        "f_z_chi =  stats.chi2(n1).cdf(chi_mark)\n",
        "p_value = 2 * min(f_z_chi, 1 - f_z_chi)\n",
        "print(\"chi-squared test (m is not known): z = %.3f; p-value = %.3f\" % (chi_mark, p_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GHdCExG6Y03D",
        "outputId": "db409974-1eac-4783-df68-e4ad2025edde"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Для случайной величины Х:\n",
            "z-sctistic: 1.651\n",
            "p-value: 0.099\n",
            "t-sctistic: 1.651\n",
            "p-value: 0.100\n",
            "chi-squared test (m is known): z = 220.860; p-value = 0.184\n",
            "chi-squared test (m is not known): z = 219.977; p-value = 0.171\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aFxaB0qA8DAc",
        "outputId": "fca7ac45-4f3e-49e7-b669-f8c9af6280b4"
      },
      "source": [
        "#for X1 X2\n",
        "\n",
        "#2-sample t-test\n",
        "print('2-sample t-test: ')\n",
        "ttest_2_sample_stat = stats.ttest_ind(sample1, sample2)[0]\n",
        "ttest_2_sample_p_value = stats.ttest_ind(sample1, sample2)[1]\n",
        "print(\"2 sample t-test: \")\n",
        "print('stistic: %.3f' %ttest_2_sample_stat)\n",
        "print('p_value: %.3f' %ttest_2_sample_p_value)\n",
        "\n",
        "#2-sample F-test(if we know mean)\n",
        "print('2-sample F-test(if we know mean): ')\n",
        "statisticm = s1 / s2\n",
        "f_z_f =  stats.f(n1, n2).cdf(statisticm)\n",
        "p_valuem = 2 * min(f_z_f, 1 - f_z_f)\n",
        "print(\"statistic: %.3f \\n\" %statisticm, \n",
        "      \"p_value: \", p_valuem)\n",
        "\n",
        "#2-sample F-test(if we don't know mean)\n",
        "z1 = (n1-1)*s1\n",
        "z2 = (n2-1)*s2\n",
        "print('2-sample F-test(if we dont know mean): ')\n",
        "statistic = z1 / z2\n",
        "f_z_f =  stats.f((n1 - 1), (n2 - 1)).cdf(statistic)\n",
        "p_value = 2 * min(f_z_f, 1 - f_z_f)\n",
        "print(\"statistic: %.3f \\n\" %statistic, \n",
        "      \"p_value: \", p_value)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2-sample t-test: \n",
            "2 sample t-test: \n",
            "stistic: 1.917\n",
            "p_value: 0.056\n",
            "2-sample F-test(if we know mean): \n",
            "statistic: 2.982 \n",
            " p_value:  2.220446049250313e-16\n",
            "2-sample F-test(if we dont know mean): \n",
            "statistic: 2.982 \n",
            " p_value:  2.220446049250313e-16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "M1 = 5\n",
        "M2 = 5\n",
        "S1 = 3\n",
        "S2 = 1\n",
        "n1 = 250\n",
        "n2 = 250\n",
        "\n",
        "z = (mean1 - mean2) / (S1/n1 + S2/n2)\n",
        "f_z = stats.norm(loc=0, scale=1).cdf(z)\n",
        "p_value = 2 * min(f_z, 1 - f_z)\n",
        "\n",
        "n = 1000\n",
        "arr1 = list()\n",
        "arr2 = list()\n",
        "z = list()\n",
        "p = list()\n",
        "for i in range(n):\n",
        "  arr1.append(stats.norm(loc=5, scale=3**0.5).rvs(n1))\n",
        "  arr2.append(stats.norm(loc=5, scale=1).rvs(n2))\n",
        "  z.append(float((arr1[i].mean() - arr2[i].mean()) / (S1/n1 + S2/n2) **0.5))\n",
        "  f_z = stats.norm(loc=0, scale=1).cdf(z[i])\n",
        "  p.append(min(f_z, 1 - f_z) * 2)\n",
        "mean_z = np.mean(z)\n",
        "d_z = np.var(z)\n",
        "std_z = np.std(z)\n",
        "\n",
        "mean_p = np.mean(p)\n",
        "d_p = np.var(p)\n",
        "std_p = np.std(p)\n",
        "\n",
        "print(\"mean_z = %.3f; d_z = %.3f; std_z = %.3f\" % (mean_z, d_z, std_z))\n",
        "print(\"mean_p = %.3f; d_p = %.3f; std_p = %.3f\" % (mean_p, d_p, std_p))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AkGlirQwBexc",
        "outputId": "3e77bfb6-609d-437c-b055-0f119ff22404"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mean_z = 0.002; d_z = 1.031; std_z = 1.015\n",
            "mean_p = 0.493; d_p = 0.084; std_p = 0.290\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.linspace(-3, 3, 100)\n",
        "norm_rv = stats.norm(loc=0, scale=1)\n",
        "pdf = norm_rv.pdf(x)\n",
        "\n",
        "# плотность \n",
        "plt.plot(x, pdf, lw=3)\n",
        "\n",
        "plt.hist(np.array(z), bins=30, density=True);\n",
        "\n",
        "plt.ylabel('$f(z|H0)$')\n",
        "plt.xlabel('$z$');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "M0hE2EEpyE07",
        "outputId": "9fb38df9-6370-4187-b03a-082791ee8b02"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.linspace(-0.5, 1.5, 100)\n",
        "uniform_rv = stats.uniform(loc=0, scale=1)\n",
        "pdf = uniform_rv.pdf(x)\n",
        "\n",
        "# плотность \n",
        "plt.plot(x, pdf, lw=3)\n",
        "\n",
        "plt.hist(np.array(p), bins=30, density=True);\n",
        "\n",
        "plt.ylabel('$f(z|H0)$')\n",
        "plt.xlabel('$z$');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "c4g14QlKyPjd",
        "outputId": "41135b7c-cd87-4c85-f28d-4139a0bf07e6"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}